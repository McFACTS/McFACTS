#!/usr/bin/env python3
"""Test for circular_binaries_encounters_ecc_prograde function
    in physics/dynamics.py
"""
######## Imports ########
#### Standard Library ####
import time
#### Third-Party ####
import numpy as np
#### Homemade ####
#### Local ####
from mcfacts.physics.dynamics import circular_binaries_encounters_ecc_prograde

######## Setup ########
INPUT_DATA = {
    "smbh_mass" : 100000000.0,
    "disk_bh_pro_orbs_a" : np.asarray(
    [  559.86995977,   857.88571991,  1006.41621031,  1276.74195858,
  3961.45561659,  2741.5872448,  22664.84524545, 29286.22960393,
  9879.50377993, 16433.68943884,   238.46448989, 18585.08955458,
 32854.46942733, 10353.46796064, 25525.22072258, 44976.73776854,
 44906.5428082,  13242.29295703, 32494.24903078, 13723.88711618,
 31231.50358344, 46312.73883674, 14987.87823212, 31742.4979749,
 38212.67035343, 37759.25682326, 17476.84890219, 13759.35955366,
 13429.12676036, 26659.84606306, 12267.24925349, 16487.31996479,
 39226.13224413, 14161.21863589, 37232.51951252, 45172.97448497,
 49500.10949411, 17799.13505502, 17986.36413536, 16492.65377908,
 15225.52769475, 22276.98415977, 14368.57116385, 36804.79633869,
 21452.3979663,  46492.40745245, 16869.36618469, 25590.5410807,
 15642.40384524, 17518.32461964, 19069.68987808, 42760.41161441,
 30968.1049959,  30943.46611866, 14055.21047138, 30386.47490431,
  9968.83855526, 33523.46094346, 36606.6090342,   9577.04942111,
 42839.25223125, 25170.57972028, 37456.69283269, 48509.17742918,
 26723.31775311, 25084.09486393, 42975.69092169, 40252.45727264,
 19568.92566638, 12103.53349355, 16958.41864155, 23054.74240775,
 29862.33226716, 23113.09187619, 36308.38456918, 34495.74529915,
 14996.00145174, 31703.17765458, 19524.02472863, 19984.7406644,
 28067.6177525,  36363.79759742,  6880.85632063,  9294.83099287,
  8787.95330212, 15245.19143386,  9092.64982301, 14136.48416873,
 11577.20983063, 12329.34733995,  6981.66634683, 13168.23406062,
 11828.23843231,  9215.0867459,   8217.19201759,  8148.364851,
 10587.09944414,  4624.12780979,  5731.00878381,  8119.26842392,
  3607.52339695,  4682.21124235, 38846.7151852,   7073.86603286,
  4879.42401949,  9379.35822737,  4790.88022169,  6123.76519586,
  6257.96511418,  3330.28642006,  2680.29467071,  1973.38746238,
  2502.37478752,  6343.61259007,  9601.51121501,  1442.09108321,
 14282.04586369, 11687.48187158, 23749.85699299, 36110.30651606,
 15752.77244793, 30878.34290653, 25621.63346646, 33395.09118601,
 37100.15050453, 20704.59430044, 29835.26049405, 24219.55296313,
 36356.87834414, 13688.34050943, 35691.1096902,    689.14215369,
 28772.35003748, 25476.09724277, 42348.64044664, 22078.54976404,
 44758.15407768, 22183.73218124, 46517.68512337, 30903.7809651,
 16727.47969378, 44014.25915985, 29656.33175469, 25775.35777568,
   343.49326443, 49983.54235621, 22048.33964259, 26740.63900391,
 33358.21032743, 30824.33516759, 23662.59457041,    53.73905496,
 19376.94948361,  4243.63069353, 20024.29665334, 31977.53728887,
 32096.66520985]),
    "disk_bh_pro_masses" : np.asarray(
    [23.04382675, 37.66531596, 12.19047801, 14.63843392, 20.78466134, 10.70047642,
 16.33148359, 17.18036802, 17.89359495, 19.58922804, 12.76628523, 13.16237329,
 10.84011879, 12.38934397, 20.18163542, 19.97885826, 12.13668438, 12.8997303,
 28.62240711, 14.2900648,  15.81228975, 11.51765569, 12.92762697, 17.24641743,
 16.81485277, 11.78944529, 11.53923435, 11.12693854, 13.03682204, 24.9110395,
 33.96661124, 12.04844506, 35.64851794, 10.4652962,  14.35669827, 14.14717946,
 13.47011613, 10.66296796, 15.89992221, 14.67289268, 10.21845001, 13.61834958,
 13.60442848, 37.55357595, 18.29470202, 36.75714834, 10.41133813, 14.4222228,
 11.40752472, 20.93125079, 13.94632527, 22.76339394, 24.11773373, 27.2969554,
 13.54612371, 21.04541433, 11.56074425, 22.7452077,  12.36330598, 10.77245357,
 13.13153666, 24.32951531, 13.7349623,  11.99033952, 33.88543722, 16.20979746,
 11.7368382,  14.46421917, 26.28750042, 13.67415564, 10.72355688, 20.41867093,
 35.13261733, 22.01784934, 38.51603589, 11.00911894, 11.19840693, 11.48409892,
 11.8767494,  14.3416062,  15.08838144, 14.63708477, 10.43731814, 18.17476798,
 10.69132713, 37.50941832, 11.65924821, 34.45115526, 19.087408,   16.86831098,
 16.32892699, 32.16991235, 10.46705122, 10.29495589, 12.50091918, 11.08257535,
 35.91792208, 10.9927995,  13.33237346, 18.73745379, 13.57351775, 10.40870463,
 17.65248817, 24.27602287, 11.55367628, 34.89487072, 10.32195732, 13.26952292,
 36.2438001,  16.42003546, 15.6795294,  10.43085703, 11.65150783, 20.30953454,
 17.81816246, 17.37079725, 10.61518599, 10.90882881, 13.26186825, 12.78553843,
 11.07458769, 26.68463194, 31.03138713, 33.7782474,  13.36343158, 12.20814905,
 14.12622426, 33.76773414, 10.45655845, 10.68769184, 13.24692278, 34.2395432,
 22.80221454, 17.23339757, 37.1979434,  10.63866912, 12.23581274, 20.1080677,
 13.33303786, 16.52407228, 10.12562812, 10.12114139, 18.22698294, 10.24094092,
 21.03536169, 24.18892636, 12.21268424, 10.57594558, 11.03423712, 11.98486551,
 19.21490903, 11.12271795, 11.60726711, 46.39136492, 25.28157519, 15.82670297,
 14.66332291]),
    "disk_bh_pro_orbs_ecc" : np.asarray(
    [0.01,       0.01,       0.01,       0.01,       0.01,       0.01652047,
 0.09301572, 0.01368524, 0.081,      0.02305395, 0.12356601, 0.1,
 0.02086919, 0.01991423, 0.1,        0.04223603, 0.04389518, 0.01179485,
 0.05880891, 0.03277716, 0.14568656, 0.0239095,  0.01,       0.03380772,
 0.08684984, 0.01539093, 0.0630308,  0.01,       0.06950256, 0.01100644,
 0.1,        0.02200584, 0.01,       0.04966762, 0.01388879, 0.05088305,
 0.01689365, 0.1,        0.05395034, 0.02572683, 0.02008393, 0.01678672,
 0.01,       0.03551059, 0.03299852, 0.01,       0.06385532, 0.01085124,
 0.07864137, 0.01,       0.04434662, 0.01692075, 0.01403518, 0.04765168,
 0.03755494, 0.0812426,  0.01,       0.01,       0.02836978, 0.0190526,
 0.08135105, 0.01,       0.08657538, 0.05627028, 0.01,       0.02223838,
 0.18562703, 0.02312445, 0.01,       0.1,        0.05783914, 0.03639269,
 0.01357872, 0.08154679, 0.01230569, 0.07432401, 0.01,       0.02294418,
 0.07926106, 0.03466295, 0.06684518, 0.0150407,  0.04390876, 0.04166783,
 0.1,        0.0457573,  0.05389326, 0.1,        0.05026491, 0.05789832,
 0.02998673, 0.03947545, 0.1,        0.05858354, 0.1,        0.1,
 0.1,        0.01,       0.1,        0.1,        0.01,       0.01,
 0.01521443, 0.0154231,  0.01,       0.1,        0.06414529, 0.14381961,
 0.01234229, 0.01,       0.01,       0.01,       0.01,       0.13053421,
 0.26937275, 0.01,       0.01,       0.01479546, 0.03364285, 0.02128563,
 0.01287934, 0.04805096, 0.06089331, 0.05600493, 0.02355643, 0.07198548,
 0.04562643, 0.03127272, 0.03391023, 0.01,       0.02430397, 0.01,
 0.01,       0.01750084, 0.01182763, 0.06871938, 0.05629609, 0.01241567,
 0.06282296, 0.01478917, 0.0216934,  0.06894114, 0.01177075, 0.01711656,
 0.05799715, 0.06212614, 0.0110527,  0.02786611, 0.07204675, 0.04780734,
 0.01681882, 0.01,       0.03147393, 0.01,       0.1,        0.07061706,
 0.03000502]),
    "bin_mass_1" : np.asarray(
    [31.81376486, 14.00607418, 20.06352152]),
    "bin_mass_2" : np.asarray(
    [31.81376486, 14.00607418, 20.06352152]),
    "bin_orb_a" : np.asarray(
    [23806.08773866, 20788.25915011,  3870.76078201]),
    "bin_sep" : np.asarray(
    [15.4630719,  39.697615,    4.68274731]),
    "bin_ecc" : np.asarray(
    [0.34407173, 0.31248856, 0.67797253]),
    "bin_orb_ecc" : np.asarray(
    [0.0121, 0.01,   0.01,  ]),
    "timestep_duration_yr" : 10000.0,
    "disk_bh_pro_orb_ecc_crit" : 0.01,
    "delta_energy_strong" : 0.1,
    "disk_radius_outer" : 50000.0,
}

OUTPUT_DATA = {
    "bin_sep" : np.asarray([15.4630719,  43.6673765,   4.68274731]),
    "bin_ecc" : np.asarray([0.34407173, 0.2812397,  0.67797253]),
    "bin_orb_ecc" : np.asarray([0.0121, 0.011,  0.01,  ]),
    "disk_bh_pro_orbs_a" : np.asarray(
    [  559.86995977,   857.88571991,  1006.41621031,  1276.74195858,
  3961.45561659,  2741.5872448,  22664.84524545, 29286.22960393,
  9879.50377993, 16433.68943884,   238.46448989, 18585.08955458,
 32854.46942733, 10353.46796064, 25525.22072258, 44976.73776854,
 44906.5428082,  13242.29295703, 32494.24903078, 13723.88711618,
 31231.50358344, 46312.73883674, 14987.87823212, 31742.4979749,
 38212.67035343, 37759.25682326, 17476.84890219, 13759.35955366,
 13429.12676036, 26659.84606306, 12267.24925349, 16487.31996479,
 39226.13224413, 14161.21863589, 37232.51951252, 45172.97448497,
 49500.10949411, 17799.13505502, 17986.36413536, 16492.65377908,
 15225.52769475, 22276.98415977, 14368.57116385, 36804.79633869,
 21452.3979663,  46492.40745245, 16869.36618469, 25590.5410807,
 15642.40384524, 17518.32461964, 19069.68987808, 42760.41161441,
 30968.1049959,  30943.46611866, 14055.21047138, 30386.47490431,
  9968.83855526, 33523.46094346, 36606.6090342,   9577.04942111,
 42839.25223125, 25170.57972028, 37456.69283269, 48509.17742918,
 26723.31775311, 25084.09486393, 42975.69092169, 40252.45727264,
 19568.92566638, 12103.53349355, 16958.41864155, 23054.74240775,
 29862.33226716, 23113.09187619, 36308.38456918, 34495.74529915,
 14996.00145174, 31703.17765458, 19524.02472863, 17986.26659796,
 28067.6177525,  36363.79759742,  6880.85632063,  9294.83099287,
  8787.95330212, 15245.19143386,  9092.64982301, 14136.48416873,
 11577.20983063, 12329.34733995,  6981.66634683, 13168.23406062,
 11828.23843231,  9215.0867459,   8217.19201759,  8148.364851,
 10587.09944414,  4624.12780979,  5731.00878381,  8119.26842392,
  3607.52339695,  4682.21124235, 38846.7151852,   7073.86603286,
  4879.42401949,  9379.35822737,  4790.88022169,  6123.76519586,
  6257.96511418,  3330.28642006,  2680.29467071,  1973.38746238,
  2502.37478752,  6343.61259007,  9601.51121501,  1442.09108321,
 14282.04586369, 11687.48187158, 23749.85699299, 36110.30651606,
 15752.77244793, 30878.34290653, 25621.63346646, 33395.09118601,
 37100.15050453, 20704.59430044, 29835.26049405, 24219.55296313,
 36356.87834414, 13688.34050943, 35691.1096902,    689.14215369,
 28772.35003748, 25476.09724277, 42348.64044664, 22078.54976404,
 44758.15407768, 22183.73218124, 46517.68512337, 30903.7809651,
 16727.47969378, 44014.25915985, 29656.33175469, 25775.35777568,
   343.49326443, 49983.54235621, 22048.33964259, 26740.63900391,
 33358.21032743, 30824.33516759, 23662.59457041,    53.73905496,
 19376.94948361,  4243.63069353, 20024.29665334, 31977.53728887,
 32096.66520985]),
    "disk_bh_pro_orbs_ecc" : np.asarray(
    [0.01,       0.01,       0.01,       0.01,       0.01,       0.01652047,
 0.09301572, 0.01368524, 0.081,      0.02305395, 0.12356601, 0.1,
 0.02086919, 0.01991423, 0.1,        0.04223603, 0.04389518, 0.01179485,
 0.05880891, 0.03277716, 0.14568656, 0.0239095,  0.01,       0.03380772,
 0.08684984, 0.01539093, 0.0630308,  0.01,       0.06950256, 0.01100644,
 0.1,        0.02200584, 0.01,       0.04966762, 0.01388879, 0.05088305,
 0.01689365, 0.1,        0.05395034, 0.02572683, 0.02008393, 0.01678672,
 0.01,       0.03551059, 0.03299852, 0.01,       0.06385532, 0.01085124,
 0.07864137, 0.01,       0.04434662, 0.01692075, 0.01403518, 0.04765168,
 0.03755494, 0.0812426,  0.01,       0.01,       0.02836978, 0.0190526,
 0.08135105, 0.01,       0.08657538, 0.05627028, 0.01,       0.02223838,
 0.18562703, 0.02312445, 0.01,       0.1,        0.05783914, 0.03639269,
 0.01357872, 0.08154679, 0.01230569, 0.07432401, 0.01,       0.02294418,
 0.07926106, 0.03119666, 0.06684518, 0.0150407,  0.04390876, 0.04166783,
 0.1,        0.0457573,  0.05389326, 0.1,        0.05026491, 0.05789832,
 0.02998673, 0.03947545, 0.1,        0.05858354, 0.1,        0.1,
 0.1,        0.01,       0.1,        0.1,        0.01,       0.01,
 0.01521443, 0.0154231,  0.01,       0.1,        0.06414529, 0.14381961,
 0.01234229, 0.01,       0.01,       0.01,       0.01,       0.13053421,
 0.26937275, 0.01,       0.01,       0.01479546, 0.03364285, 0.02128563,
 0.01287934, 0.04805096, 0.06089331, 0.05600493, 0.02355643, 0.07198548,
 0.04562643, 0.03127272, 0.03391023, 0.01,       0.02430397, 0.01,
 0.01,       0.01750084, 0.01182763, 0.06871938, 0.05629609, 0.01241567,
 0.06282296, 0.01478917, 0.0216934,  0.06894114, 0.01177075, 0.01711656,
 0.05799715, 0.06212614, 0.0110527,  0.02786611, 0.07204675, 0.04780734,
 0.01681882, 0.01,       0.03147393, 0.01,       0.1,        0.07061706,
 0.03000502]),
}

######## Functions ########

######## Tests ########
def test_inputs():
    for key in INPUT_DATA:
        print(key)
    for key in OUTPUT_DATA:
        print(key)
        if key in INPUT_DATA:
            assert not np.allclose(INPUT_DATA[key],OUTPUT_DATA[key]), \
                "test circular_binaries_encounters_ecc_prograde: Bad OUTPUT DATA\n" +\
                "All input and output values are identical"

def test_function():
    tic = time.perf_counter()
    bin_sep, bin_ecc, bin_orb_ecc, disk_bh_pro_orbs_a, disk_bh_pro_orbs_ecc = \
        circular_binaries_encounters_ecc_prograde(
                INPUT_DATA["smbh_mass"],
                INPUT_DATA["disk_bh_pro_orbs_a"].copy(),
                INPUT_DATA["disk_bh_pro_masses"].copy(),
                INPUT_DATA["disk_bh_pro_orbs_ecc"].copy(),
                INPUT_DATA["bin_mass_1"].copy(),
                INPUT_DATA["bin_mass_2"].copy(),
                INPUT_DATA["bin_orb_a"].copy(),
                INPUT_DATA["bin_sep"].copy(),
                INPUT_DATA["bin_ecc"].copy(),
                INPUT_DATA["bin_orb_ecc"].copy(),
                INPUT_DATA["timestep_duration_yr"],
                INPUT_DATA["disk_bh_pro_orb_ecc_crit"],
                INPUT_DATA["delta_energy_strong"],
                INPUT_DATA["disk_radius_outer"],
    )
    toc = time.perf_counter()
    print("bin_sep")
    print(bin_sep)
    print("bin_ecc")
    print(bin_ecc)
    print("bin_orb_ecc")
    print(bin_orb_ecc)
    print("disk_bh_pro_orbs_a")
    print(disk_bh_pro_orbs_a)
    print("disk_bh_pro_orbs_ecc")
    print(disk_bh_pro_orbs_ecc)
    assert np.allclose(disk_bh_pro_orbs_a, OUTPUT_DATA["disk_bh_pro_orbs_a"]), \
            "test circular_binaries_encounters_ecc_prograde: OUTPUT_DATA mismatch"
    assert np.allclose(disk_bh_pro_orbs_ecc, OUTPUT_DATA["disk_bh_pro_orbs_ecc"]), \
            "test circular_binaries_encounters_ecc_prograde: OUTPUT_DATA mismatch"
    assert np.allclose(bin_sep, OUTPUT_DATA["bin_sep"]), \
            "test circular_binaries_encounters_ecc_prograde: OUTPUT_DATA mismatch"
    assert np.allclose(bin_ecc, OUTPUT_DATA["bin_ecc"]), \
            "test circular_binaries_encounters_ecc_prograde: OUTPUT_DATA mismatch"
    assert np.allclose(bin_orb_ecc, OUTPUT_DATA["bin_orb_ecc"]), \
            "test circular_binaries_encounters_ecc_prograde: OUTPUT_DATA mismatch"
    print("test_circular_binaries_encounters_ecc_prograde: pass")
    diff_mask_bh = ~(
        np.isclose(disk_bh_pro_orbs_a, INPUT_DATA["disk_bh_pro_orbs_a"]) & \
        np.isclose(disk_bh_pro_orbs_ecc, INPUT_DATA["disk_bh_pro_orbs_ecc"])
    )
    diff_mask_bin = ~(
        np.isclose(bin_sep, INPUT_DATA["bin_sep"]) & \
        np.isclose(bin_ecc, INPUT_DATA["bin_ecc"]) & \
        np.isclose(bin_orb_ecc, INPUT_DATA["bin_orb_ecc"])
    )
    diff_mask = np.concatenate((diff_mask_bh,diff_mask_bin))
    print(f"{np.sum(diff_mask)} / {np.size(diff_mask)} changes")
    print(f"Time: {toc-tic} seconds!")

def test_performance(n=80):
    tic = time.perf_counter()
    bin_sep, bin_ecc, bin_orb_ecc, disk_bh_pro_orbs_a, disk_bh_pro_orbs_ecc = \
        circular_binaries_encounters_ecc_prograde(
                INPUT_DATA["smbh_mass"],
                np.tile(INPUT_DATA["disk_bh_pro_orbs_a"],n),
                np.tile(INPUT_DATA["disk_bh_pro_masses"],n),
                np.tile(INPUT_DATA["disk_bh_pro_orbs_ecc"],n),
                np.tile(INPUT_DATA["bin_mass_1"],n),
                np.tile(INPUT_DATA["bin_mass_2"],n),
                np.tile(INPUT_DATA["bin_orb_a"],n),
                np.tile(INPUT_DATA["bin_sep"],n),
                np.tile(INPUT_DATA["bin_ecc"],n),
                np.tile(INPUT_DATA["bin_orb_ecc"],n),
                INPUT_DATA["timestep_duration_yr"],
                INPUT_DATA["disk_bh_pro_orb_ecc_crit"],
                INPUT_DATA["delta_energy_strong"],
                INPUT_DATA["disk_radius_outer"],
    )
    toc = time.perf_counter()
    print(f"Time: {toc-tic} seconds!")


######## Algorithm ########
def tests():
    test_inputs()
    test_function()
    #test_performance()

######## Main ########
def main():
    tests()
    return
######## Execution ########
if __name__ == "__main__":
    main()
